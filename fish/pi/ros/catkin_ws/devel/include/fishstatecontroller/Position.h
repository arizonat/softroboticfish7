// Generated by gencpp from file fishstatecontroller/Position.msg
// DO NOT EDIT!


#ifndef FISHSTATECONTROLLER_MESSAGE_POSITION_H
#define FISHSTATECONTROLLER_MESSAGE_POSITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fishstatecontroller
{
template <class ContainerAllocator>
struct Position_
{
  typedef Position_<ContainerAllocator> Type;

  Position_()
    : distance()
    , x_offset()
    , y_offset()  {
    }
  Position_(const ContainerAllocator& _alloc)
    : distance(_alloc)
    , x_offset(_alloc)
    , y_offset(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _distance_type;
  _distance_type distance;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _x_offset_type;
  _x_offset_type x_offset;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _y_offset_type;
  _y_offset_type y_offset;





  typedef boost::shared_ptr< ::fishstatecontroller::Position_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fishstatecontroller::Position_<ContainerAllocator> const> ConstPtr;

}; // struct Position_

typedef ::fishstatecontroller::Position_<std::allocator<void> > Position;

typedef boost::shared_ptr< ::fishstatecontroller::Position > PositionPtr;
typedef boost::shared_ptr< ::fishstatecontroller::Position const> PositionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fishstatecontroller::Position_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fishstatecontroller::Position_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fishstatecontroller::Position_<ContainerAllocator1> & lhs, const ::fishstatecontroller::Position_<ContainerAllocator2> & rhs)
{
  return lhs.distance == rhs.distance &&
    lhs.x_offset == rhs.x_offset &&
    lhs.y_offset == rhs.y_offset;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fishstatecontroller::Position_<ContainerAllocator1> & lhs, const ::fishstatecontroller::Position_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fishstatecontroller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fishstatecontroller::Position_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fishstatecontroller::Position_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fishstatecontroller::Position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fishstatecontroller::Position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fishstatecontroller::Position_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fishstatecontroller::Position_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fishstatecontroller::Position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7269bbef7b024d4726181ff666ab9ee9";
  }

  static const char* value(const ::fishstatecontroller::Position_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7269bbef7b024d47ULL;
  static const uint64_t static_value2 = 0x26181ff666ab9ee9ULL;
};

template<class ContainerAllocator>
struct DataType< ::fishstatecontroller::Position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fishstatecontroller/Position";
  }

  static const char* value(const ::fishstatecontroller::Position_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fishstatecontroller::Position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string distance\n"
"string x_offset\n"
"string y_offset\n"
;
  }

  static const char* value(const ::fishstatecontroller::Position_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fishstatecontroller::Position_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distance);
      stream.next(m.x_offset);
      stream.next(m.y_offset);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Position_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fishstatecontroller::Position_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fishstatecontroller::Position_<ContainerAllocator>& v)
  {
    s << indent << "distance: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.distance);
    s << indent << "x_offset: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.x_offset);
    s << indent << "y_offset: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.y_offset);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FISHSTATECONTROLLER_MESSAGE_POSITION_H
